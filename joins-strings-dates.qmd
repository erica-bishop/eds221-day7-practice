---
title: "Joins, strings, and dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)
library(kableExtra)
```

## Joins

Using datapasta to insert data (use datapasta with caution - not a good reproducible way to work but for this case in quicikly getting some data from a web page its the way to go)

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
             "lagoon",   "bobcat",    "adult",
              "bluff",   "coyote", "juvenile",
              "creek",      "fox",    "adult",
               "oaks", "squirrel", "juvenile",
              "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )


```

### Full join

```{r}
fulljoin_example <- full_join(animals, sites, by = "location")
```

### Left Join

```{r}
left_join_example <- left_join(animals, sites, by = "location")
```

### Inner Join

```{r}
inner_join_example <- inner_join(animals, sites, by = "location")
```

```{r}
sites_2 <- sites |> 
  rename(loc = location)

```

Example of when key variable doesn't match:

```{r}
nonmatching <- full_join(animals, sites_2, by = c("location" = "loc"))

```

### Semi Join

```{r}
semi_join_example <- semi_join(animals, sites)
```

### Anti join

```{r}
anti_join_example <- anti_join(animals, sites, by = "location")

```

# Data wrangling refresher with penguins

Write a single sequence to include penguins only from Biscoe and Dream islands, remove year and sex variables, and add new column called body_mass_kg, and reneame island to location

```{r}

penguin_wranglin <- penguins |> 
  filter(penguins$island %in% c("Biscoe", "Dream")) |> 
  select(-year, -sex) |> 
  mutate(body_mass_kg = body_mass_g / 1000) |> 
  rename(location = island)

```

# Dates

Dates can be tricky because they have:

-   different formats

-   different resolutions

-   leap years

-   times of day

-   time zones

-   day of week

How can we make dates clear and easy to wrangle?

Format: **ISO 8601** provides an unambiguous and well-defined methods of representing dates and times, particularly when data is transferred between coiuntries with different conventions for writing numeric dates and times

**YYYY-MM-DD** Always keep the leading zeroes, will always have 8 digits (or what you do have in the same format)

Or for more.... **YYYY-MM-DDThh:mm:ssTZD** The T just signifies the following is for time, on 24 hr, then time-zone designator (TZD) TZD shows + or - from UTC (coordinated universal time) i.e. -07:00

For example: February 18, 1996 at 8:34pm PST in Santa Barbara?

1996-02-18T20:34-07:00

For example: 12/5/2002 at 2:41am in Santa barbara?

2002-12-05T02:41-07:00

The `{lubridate}` package makes it easier to do things R does with date and time and makes it possible to do the things that R doesn't do

One of the best features is parsing date-time data quickly and mostly painlessly

As long as you know the format of your date data (i.e. mm/dd/yy or dd/mm/yy) functions differ by order: i.e. `mdy()` or `dmy()`

When you convert with lubridate, you'll get: `date` classes from ymd/dmy/mdy functions `POSIXct`(portable operating system continuous time) - can convert to TZ using `with_tz()`

# Wrangling strings

Strings are ordered sequences of characters

Regular expressions (`regex`) are patterns used to match character combinations in strings - helps search strings

## Using `{stringr}`

`{stringr}` contains functions designed to make working with strings easier - including easier ways to do things like:

-   detecting string patters `str_detect()` output TRUE or FALSE if the pattern is detected

-   replacing string patterns `str_replace()` replaces a string pattern with something else

-   counting, collapsing, etc.

## Date examples with `{lubridate}`

```{r}

my_date <- "05-20-1997"
lubridate::mdy(my_date)
#lubridate functions are mdy, ymd, dmy

date2 <- "11/7/2003"
lubridate::dmy(date2)

date3 <- "08-Jun_1974"
lubridate::dmy(date3)

date4 <- "19610518"
lubridate::ymd(my_date)

date5 <- "05/20/97"
lubridate::mdy(date5)


  
```

```{r}

lubridate::ymd("1942-08-30")

lubridate::dmy("08/08/69")

time <- "2020-08-12 11:18"

time <- ymd_hm(time)

class(time)

```
Can also use lubridate to convert time zones - using the Olson name for the time zone
```{r}
with_tz(time, "America/Los_Angeles")
```

```{r}

with_tz(time, "America/Hawaii")

my_time <- lubridate::ymd_hms(time)

#can pull individual pieces of time with:

year(my_time)
day(my_time)
hour(my_time)
minute(my_time)
second(my_time)

#parsing pieces becomes very useful for exploring and analyzing data in different ways
```

```{r}
umber_bday <- lubridate::ymd("20010411")

wday(umber_bday, label = TRUE)

wday("1997-05-20", label = TRUE)

week(umber_bday)
#shows week of the year

```

```{r}

urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)
#when mutating with same name as existing column, it overwrites. if creating a new name, it will add a new column

urchin_ymd <- urchin_counts |> 
  mutate(date = mdy(date)) |> 
  mutate(year = year(date),
         month = month(date),
         day = day(date))

#changed class from character to date


```


```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)

class(time_interval)

time_length(time_interval, "year")
#time_length allows you to measure interval lengths or between times

```

# `{stringr}` for working with strings

## `str_detect()`

```{r}

my_string <- "Teddy loves eating salmon and socks"

my_string |> str_detect("love")

my_string |> str_detect("pup")

#returns TRUE or FALSE

```
```{r}

food_string <- c("burrito", "fish taco", "taco salad")

food_string |> 
  str_detect("fish")

#for vectors searches each element


```

Now practicing with the starwars dataset

```{r}

skywalkers <- starwars |> 
  filter(str_detect(name, pattern = "Skywalker"))

Mauls <- starwars |> 
  filter(str_detect(name, pattern = "Maul"))

blue_eyes <- starwars |> 
  filter(str_detect(eye_color, pattern = "blue"))


```

### `str_replace()` to replace string patterns

```{r}
firewalkers <- starwars |> 
  mutate(fire_name = str_replace(name, pattern = "Sky",
                                 replacement = "Fire"))

```

```{r}
feedback <- c("  I ate  some     nachos", "Wednesday   morning ")

#string trim considers white space before and after first and last characters
str_trim(feedback)

str_squish(feedback)
#str_squish does leading, trailing, and intermediate whitespace

str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)

#str_to_ changes case

```

```{r}

starwars_lc <- starwars |> 
  mutate(name_lower = str_to_lower(name))

```

## `case_when()` and `mutate()`

case_when is another way to achieve the same end as using ifelse with mutate()

```{r}

robo_detect <- starwars |> 
  mutate(robot_status = case_when(
    species == "Droid" ~ "!ROBOT!",
    species == "Human" ~ "just people",
    TRUE ~ "non-robot non-human"
  ))

```












